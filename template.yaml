AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    This template deploys a VPC, with a pair of public and private subnets spread 
    across two Availability Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways using spot 
    instances (one in each AZ), and default routes for them in the private subnets.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.192.11.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.192.20.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.192.21.0/24

    KeyName:
        Description: EC2 Key pair name for Instance
        Type: AWS::EC2::KeyPair::KeyName

    InstanceType:
        Description: Please enter EC2 type for NAT Instances, default is t3.nano
        Type: String
        AllowedValues: 
            - t2.nano 
            - t2.micro 
            - t2.small 
            - t2.medium 
            - t2.large 
            - t2.xlarge 
            - t2.2xlarge 
            - t3.nano 
            - t3.micro 
            - t3.small 
            - t3.medium 
            - t3.large 
            - t3.xlarge 
            - t3.2xlarge
        Default: t3.nano

Mappings:
    AWSRegion2AMI:
        eu-west-1: 
            AMI: ami-0ea87e2bfa81ca08a
        eu-central-1: 
            AMI: ami-06465d49ba60cf770

Resources:
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    SSHSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Security group with SSH rule"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            VpcId: !Ref VPC

    NatNetworkInterface1:
      Type: AWS::EC2::NetworkInterface
      Properties:
        SourceDestCheck: false
        SubnetId: !Ref PublicSubnet1
        GroupSet:
            - !GetAtt VPC.DefaultSecurityGroup
            - !Ref SSHSecurityGroup

    NatNetworkInterface2:
      Type: AWS::EC2::NetworkInterface
      Properties:
        SourceDestCheck: false
        SubnetId: !Ref PublicSubnet2
        GroupSet:
            - !GetAtt VPC.DefaultSecurityGroup
            - !Ref SSHSecurityGroup

    NatLaunchTemplate1:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateData:
                TagSpecifications:
                    - ResourceType: instance
                      Tags:
                        - Key: Name 
                          Value: !Sub ${EnvironmentName} NAT Launch Template
                KeyName: !Ref KeyName
                ImageId: !FindInMap [ AWSRegion2AMI, !Ref 'AWS::Region', AMI ]
                InstanceType: t3.nano
                InstanceMarketOptions:
                    MarketType: spot
                NetworkInterfaces:
                    - DeviceIndex: 0
                      NetworkInterfaceId: !Ref NatNetworkInterface1
                CreditSpecification:
                    CpuCredits: standard

    NatLaunchTemplate2:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateData:
                TagSpecifications:
                    - ResourceType: instance
                      Tags:
                        - Key: Name 
                          Value: !Sub ${EnvironmentName} NAT Launch Template
                KeyName: !Ref KeyName
                ImageId: !FindInMap [ AWSRegion2AMI, !Ref 'AWS::Region', AMI ]
                InstanceType: t3.nano
                InstanceMarketOptions:
                    MarketType: spot
                NetworkInterfaces:
                    - DeviceIndex: 0
                      NetworkInterfaceId: !Ref NatNetworkInterface2
                CreditSpecification:
                    CpuCredits: standard

    NatAutoscalingGroup1:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AvailabilityZones:
                - !GetAtt PublicSubnet1.AvailabilityZone
            LaunchTemplate:
                LaunchTemplateId: !Ref NatLaunchTemplate1
                Version: !GetAtt NatLaunchTemplate1.LatestVersionNumber
            MaxSize: 1
            MinSize: 1

    NatAutoscalingGroup2:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AvailabilityZones:
                - !GetAtt PublicSubnet2.AvailabilityZone
            LaunchTemplate:
                LaunchTemplateId: !Ref NatLaunchTemplate2
                Version: !GetAtt NatLaunchTemplate2.LatestVersionNumber
            MaxSize: 1
            MinSize: 1

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NetworkInterfaceId: !Ref NatNetworkInterface1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NetworkInterfaceId: !Ref NatNetworkInterface2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    HelloWorldFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: hello_world/
            Handler: app.lambdaHandler
            Runtime: nodejs8.10
            VpcConfig:
                SubnetIds: 
                    - !Ref PrivateSubnet1
                    - !Ref PrivateSubnet2
                SecurityGroupIds:
                    - !GetAtt VPC.DefaultSecurityGroup
            Policies:
                - Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                          - 'ec2:CreateNetworkInterface'
                          - 'ec2:DescribeNetworkInterfaces'
                          - 'ec2:DeleteNetworkInterface'
                      Resource: '*'

Outputs: 
    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1

    PrivateSubnet2: 
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2
    
    HelloWorldFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt HelloWorldFunction.Arn
